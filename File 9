# Text Clustering

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

## Accessing the dataset

bbc=pd.read_csv('bbc-text.csv')

bbc

bbc['category'].value_counts()

## Selecting the data

data=bbc['text']

data

data[0]

data[1]

data[10]

data[100]

data[1000]

## Converting text into vectors

from sklearn.feature_extraction.text import TfidfVectorizer

tf=TfidfVectorizer()

features=tf.fit_transform(data)

features

print(features)

## Clustering using K Means

from sklearn.cluster import KMeans


SSD=[]
for k in range(1,10):
    kmeans=KMeans(n_clusters=k, random_state=10)
    kmeans.fit(features)
    SSD.append(kmeans.inertia_)
plt.plot(range(1,10),SSD);

## Applying silhouette_score
from sklearn.metrics import silhouette_score
SS=[]
for k in range(2,11):
    kmeans=KMeans(n_clusters=k, random_state=10)
    kmeans.fit(features)
    SS.append(silhouette_score(features,kmeans.predict(features)))
    
plt.plot(range(2,11),SS);

## Building the model with 5 clusters

kmeans=KMeans(n_clusters=5,random_state=10)
kmeans.fit(features)


kmeans.labels_

## Updating the DF with cluster labels

bbc['Cluster']=kmeans.labels_

bbc

## Dimensionality reduction using TSNE

from sklearn.manifold import TSNE

tsne=TSNE(n_components=2,perplexity=30,random_state=10)

features_tsne=tsne.fit_transform(features)

features_tsne

features_tsne.shape

## Visualisation 

plt.figure(figsize=(10,8))
plt.scatter(features_tsne[:,0],features_tsne[:,1]);

plt.figure(figsize=(10,8))
plt.scatter(features_tsne[:,0],features_tsne[:,1],c=bbc['Cluster']);

