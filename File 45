FILE 4

# Parser and NER

![image.png](attachment:image.png)

import spacy

nlp=spacy.load('en_core_web_sm')

type(nlp)

doc1=nlp('Let’s start by differentiating between data analytics and traditional analytics. The terms are often used interchangeably, but a distinction does exist. Traditional data analytics refers to the process of analyzing massive amounts of collected data to get insights and predictions. Business data analytics (sometimes called business analytics) takes that idea, but puts it in the context of business insight, often with prebuilt business content and tools that expedite the analysis process..Specifically, business analytics refers to:.Taking in and processing historical business data.Analyzing that data to identify trends, patterns, and root causes.Making data-driven business decisions based on those insights.In other words, data analytics is more of a general description of the modern analytics process. Business analytics implies a narrower focus and has functionally become more prevalent and more important for organizations around the globe as the overall volume of data has increase')

doc1

## Tokenizer

for token in doc1:
    print(token)

## Tagger

for token in doc1:
    print(token.text,token.tag_)

## Parser

Tries to find the dependence between the tokens.

for token in doc1:
    print(token.text,'==>',token.dep_)

from spacy import displacy

displacy.render(doc1,style='dep')

spacy.explain('nsubj')

for token in doc1:
    print(token.text,'==>',token.head)

## Noun chunks

for chunk in doc1.noun_chunks:
    print(chunk.text, '==>',chunk.label_)

## NER

Named Entity Recognizer


doc1

doc2=nlp('Sport is a significant part of life in India. The country has a very long sports history, with sports being a part of tradition, culture, finance and entertainment. People in India closely follow various sports and enthusiastically participate in them. Cricket is the most popular spectator sport in the country, and citizens often play it as a recreational activity; it generates the highest television viewership, and features full-capacity audiences in stadiums during international and Indian Premier League (IPL) matches. It is part of popular culture. However, in more recent decades, football has also become another popular sport in terms of broadcast viewership and stadium audience attendance.[2][b] Kabaddi has grown into the mainstream, as well as badminton, tennis, and athletics. India are the one of the power houses in field hockey. India won World Cup & multiple medals in field hockey in Olympics. During that time, Dhyan Chand was a notable player. Sports such as swimming and badminton are played as recreational activities and for exercise.[')

doc2

for token in doc2:
    print(token.text)

for ent in doc2.ents:
    print(ent.text,'==>',ent.label_)

spacy.explain('NORP')

# List of entities

ent_list=[]
for ent in doc2.ents:
    ent_list.append(ent.label_)

print(ent_list)

# List of tuples of text and the respective entities

for ent in doc2.ents:
    print(ent.text, ent.label_)

ent_list=[(ent.text,ent.label_) for ent in doc2.ents]

print(ent_list)

## NER for web data

import requests

from bs4 import BeautifulSoup

url='https://en.wikipedia.org/wiki/India'

print(url)

request=requests.get(url)

print(request)

request=request.text
print(request)

soup_request=BeautifulSoup(request)
print(soup_request)

text= soup_request.body.text
print(text)

type(text)

### Converting str to doc using nlp

doc3=nlp(text)

type(doc3)

doc3

### Tokenizer

for token in doc3:
    print(token.text)

len(doc3)

## # List of entities

for ent in doc3.ents:
    print(ent.text,'==>',ent.label_)

displacy.render(doc3, style='ent')

ent_list=[]
for ent in doc3.ents:
    ent_list.append(ent.label_)
print(ent_list)

from collections import Counter
Counter(ent_list)

### Entities most appeared

most_ent=[]
for ent in doc3.ents:
    most_ent.append(ent.text)
print(most_ent)

# Most common

Counter(most_ent).most_common()

Counter(most_ent).most_common(10)

Counter(most_ent).most_common(20)

print(len(doc3.ents))

EXercise:

Scrap https://en.wikipedia.org/wiki/History_of_India

Find 10 most occurred named entities in the text.

####### FILE 5

# Rule based matching

import spacy

nlp=spacy.load('en_core_web_sm')

type(nlp)

## Accessing a text

doc=nlp('''ChatGPT (Chat Generative Pre-trained Transformer)[1] is a chatbot launched by OpenAI in November 2022. It is built on top of OpenAI's GPT-3 family of large language models, and is fine-tuned (an approach to transfer learning)[2] with both supervised and reinforcement learning techniques.

ChatGPT was launched as a prototype on November 30, 2022, and quickly garnered attention for its detailed responses and articulate answers across many domains of knowledge. Its uneven factual accuracy was identified as a significant drawback.[3] Following the release of ChatGPT, OpenAI was valued at $29 billion.[4]

Training

Pioneer Building, San Francisco, headquarters of OpenAI

Sam Altman, CEO of OpenAI
ChatGPT was fine-tuned on top of GPT-3.5 using supervised learning as well as reinforcement learning.[5] Both approaches used human trainers to improve the model's performance. In the case of supervised learning, the model was provided with conversations in which the trainers played both sides: the user and the AI assistant. In the reinforcement step, human trainers first ranked responses that the model had created in a previous conversation. These rankings were used to create 'reward models' that the model was further fine-tuned on using several iterations of Proximal Policy Optimization (PPO).[6][7] Proximal Policy Optimization algorithms present a cost-effective benefit to trust region policy optimization algorithms; they negate many of the computationally expensive operations with faster performance.[8][9] The models were trained in collaboration with Microsoft on their Azure supercomputing infrastructure.

In addition, OpenAI continues to gather data from ChatGPT users that could be used to further train and fine-tune ChatGPT. Users are allowed to upvote or downvote the responses they receive from ChatGPT; upon upvoting or downvoting, they can also fill out a text field with additional feedback.[10][11][12]

Features and limitations

Cropped screenshot of a conversation with ChatGPT, December 30, 2022
Although the core function of a chatbot is to mimic a human conversationalist, ChatGPT is versatile. For example, it has the ability to write and debug computer programs; to compose music, teleplays, fairy tales, and student essays; to answer test questions (sometimes, depending on the test, at a level above the average human test-taker);[13] to write poetry and song lyrics;[14] to emulate a Linux system; to simulate an entire chat room; to play games like tic-tac-toe; and to simulate an ATM.[15] ChatGPT's training data includes man pages and information about Internet phenomena and programming languages, such as bulletin board systems and the Python programming language.[15]

In comparison to its predecessor, InstructGPT, ChatGPT attempts to reduce harmful and deceitful responses.[16] In one example, whereas InstructGPT accepts the premise of the prompt "Tell me about when Christopher Columbus came to the US in 2015" as being truthful, ChatGPT acknowledges the counterfactual nature of the question and frames its answer as a hypothetical consideration of what might happen if Columbus came to the U.S. in 2015, using information about Columbus' voyages and facts about the modern world – including modern perceptions of Columbus' actions.[6]

Unlike most chatbots, ChatGPT remembers previous prompts given to it in the same conversation; journalists have suggested that this will allow ChatGPT to be used as a personalized therapist.[17] To prevent offensive outputs from being presented to and produced from ChatGPT, queries are filtered through OpenAI's company-wide moderation API,[18][19] and potentially racist or sexist prompts are dismissed.[6][17]

ChatGPT suffers from multiple limitations. OpenAI acknowledged that ChatGPT "sometimes writes plausible-sounding but incorrect or nonsensical answers".[6] This behavior is common to large language models and is called hallucination.[20] The reward model of ChatGPT, designed around human oversight, can be over-optimized and thus hinder performance, otherwise known as Goodhart's law.[21] ChatGPT has limited knowledge of events that occurred after 2021. According to the BBC, as of December 2022 ChatGPT is not allowed to "express political opinions or engage in political activism".[22] Yet, research suggests that ChatGPT exhibits a pro-environmental, left-libertarian orientation when prompted to take a stance on political statements from two established voting advice applications.[23] In training ChatGPT, human reviewers preferred longer answers, irrespective of actual comprehension or factual content.[6] Training data also suffers from algorithmic bias, which may be revealed when ChatGPT responds to prompts including descriptors of people. In one instance, ChatGPT generated a rap indicating that women and scientists of color were inferior to white and male scientists.[24][25]

Service
ChatGPT was launched on November 30, 2022, by San Francisco-based OpenAI, the creator of DALL·E 2 and Whisper. The service was launched as initially free to the public, with plans to monetize the service later.[26] By December 4, OpenAI estimated ChatGPT already had over one million users.[10] CNBC wrote on December 15, 2022, that the service "still goes down from time to time".[27] The service works best in English, but is also able to function in some other languages, to varying degrees of success.[14] Unlike some other recent high-profile advances in AI, as of December 2022, there is no sign of an official peer-reviewed technical paper about ChatGPT.[28]

According to OpenAI guest researcher Scott Aaronson, OpenAI is working on a tool to attempt to watermark its text generation systems so as to combat bad actors using their services for academic plagiarism or for spam.[29][30] The New York Times relayed in December 2022 that the next version of GPT, GPT-4, has been "rumored" to be launched sometime in 2023.[17]

Reception and implications
Positive reactions
ChatGPT was met in December 2022 with generally positive reviews; The New York Times labeled it "the best artificial intelligence chatbot ever released to the general public".[31] Samantha Lock of The Guardian noted that it was able to generate "impressively detailed" and "human-like" text.[32] Technology writer Dan Gillmor used ChatGPT on a student assignment, and found its generated text was on par with what a good student would deliver and opined that "academia has some very serious issues to confront".[33] Alex Kantrowitz of Slate magazine lauded ChatGPT's pushback to questions related to Nazi Germany, including the claim that Adolf Hitler built highways in Germany, which was met with information regarding Nazi Germany's use of forced labor.[34]

In The Atlantic's "Breakthroughs of the Year" for 2022, Derek Thompson included ChatGPT as part of "the generative-AI eruption" that "may change our mind about how we work, how we think, and what human creativity really is".[35]

Kelsey Piper of the Vox website wrote that "ChatGPT is the general public's first hands-on introduction to how powerful modern AI has gotten, and as a result, many of us are [stunned]" and that ChatGPT is "smart enough to be useful despite its flaws".[36] Paul Graham of Y Combinator tweeted that "The striking thing about the reaction to ChatGPT is not just the number of people who are blown away by it, but who they are. These are not people who get excited by every shiny new thing. Clearly, something big is happening."[37] Elon Musk wrote that "ChatGPT is scary good. We are not far from dangerously strong AI".[36] Musk paused OpenAI's access to a Twitter database pending a better understanding of OpenAI's plans, stating that "OpenAI was started as open-source and non-profit. Neither is still true."[38][39] Musk had co-founded OpenAI in 2015, in part to address existential risk from artificial intelligence, but had resigned in 2018.[39]


Google CEO Sundar Pichai upended the work of numerous internal groups in response to the threat of disruption by ChatGPT.[40]
In December 2022, Google internally expressed alarm at the unexpected strength of ChatGPT and the newly discovered potential of large language models to disrupt the search engine business, and CEO Sundar Pichai "upended" and reassigned teams within multiple departments to aid in its artificial intelligence products, according to The New York Times.[40] The Information reported on January 3, 2023 that Microsoft Bing was planning to add optional ChatGPT functionality into its public search engine, possibly around March 2023.[41][42]

Stuart Cobbe, a chartered accountant in England & Wales, decided to the test the ChatGPT chatbot by entering questions from a sample exam paper on the ICAEW website and then entering its answers back into the online test. ChatGPT scored 42% which, while below the 55% pass mark, was considered a reasonable attempt.''')

doc

## How many sentences?


sent_count=0
for sent in doc.sents:
    sent_count=sent_count+1
    print(sent_count,'=>',sent)
print('Total no of sentences:',sent_count)

## Tokenization

for token in doc:
    print(token.text)

print(len(doc))

## Tagger

for token in doc:
    print(token.text,'=>',token.pos_)

## NER

for ent in doc.ents:
    print(ent.text,'=>',ent.label_)

## Rule based matching

doc

### Matching

  1) Token Matching 
  
  2) Phrase Matching
  
  3) Entity Matching

How ?

   1) Create an object/instance of the Matcher class.
   
   2) Define a pattern/rule.
   
   3) Add the pattern to the object
   
   4) Pass the document to the object

### Token matching

#### Occurance of the text ' ChatGPT'

from spacy.matcher import Matcher

# Create an instance of Matcher

matcher_1=Matcher(nlp.vocab)

# Define a pattern or a rule.

# A pattern is a list of dictionaries.

pattern_1=[{'text':'ChatGPT'}]

# Add pattern to the object

matcher_1.add('Pattern1',[pattern_1])

# Pass the doc to the object

match_1= matcher_1(doc)

print(len(match_1))

for match_id,start,end in match_1:
    span=doc[start:end]
    print(span.text)

## Phrase matching

#### Occurance of 'ChaptGPT is'

matcher_2=Matcher(nlp.vocab)
pattern_2=[{'text':'ChatGPT'},
          {'text':'is'}]
matcher_2.add('Pattern2',[pattern_2])
match_2=matcher_2(doc)

print(len(match_2))

for match_id,start,end in match_2:
    span=doc[start:end]
    print(span)

### Occurances of language/s, model's

matcher_3=Matcher(nlp.vocab)
pattern_3=[{'LEMMA':'language'},
          {'LEMMA':'model'}]


matcher_3.add('Pattern3',[pattern_3])
match_3=matcher_3(doc)

print(len(match_3))

for match_id,start,end in match_3:
    span=doc[start:end]
    print(span)

## Occurances of alphabets, digits 

matcher_4=Matcher(nlp.vocab)
pattern_4=[{'IS_ALPHA': True},
           {'IS_DIGIT':True}]


matcher_4.add('Pattern4',[pattern_4])
match_4=matcher_4(doc)

print(len(match_4))

for match_id,start,end in match_4:
    span=doc[start:end]
    print(span)

## Occurance of launch, discovery, find,,....

matcher_5=Matcher(nlp.vocab)
pattern_5=[{'LEMMA':
            {'IN':['launch','discover','find',
        'invent','create','develop','innovate',
                  'form','initiate']}}]

matcher_5.add('Pattern5',[pattern_5])
match_5=matcher_5(doc)

print(len(match_5))

for match_id,start,end in match_5:
    span=doc[start:end]
    print(span)

## Occurance of words of having length>15

matcher_6=Matcher(nlp.vocab)
pattern_6=[{'LENGTH':{'>=':15}}]
matcher_6.add('Pattern6',[pattern_6])
match_6=matcher_6(doc)

print(len(match_6))

for match_id,start,end in match_6:
    span=doc[start:end]
    print(span)

## Words of length 2

matcher_7=Matcher(nlp.vocab)
pattern_7=[{'LENGTH':{'==':2}}]
matcher_7.add('Pattern7',[pattern_7])
match_7=matcher_7(doc)

for match_id,start,end in match_7:
    span=doc[start:end]
    print(span)

# Occurance of Elon Musk

### Entity Matching

### Occurance of ent-type 'PERSON'

matcher_10=Matcher(nlp.vocab)
pattern_10=[{"ENT_TYPE":'PERSON'}]
matcher_10.add('Pattern10',[pattern_10])
match_10=matcher_10(doc)

print(len(match_10))

for match_id,start,end in match_10:
    span=doc[start:end]
    print(span.text)

Refer:
    https://spacy.io/usage/rule-based-matching
